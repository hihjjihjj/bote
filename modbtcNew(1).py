
import requests
import numpy as np
import time
import json
import os
import threading
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from io import BytesIO
import base64

BOT_TOKEN = "7663938011:AAEHhNQI5NqgJLuW0NyxRzYwKmeg08kVTwU"
CHAT_ID = "6514168807"
SYMBOL = "BTCUSDT"
HISTORY_FILE = 'prediction_history.json'

class AdvancedTradingBot:
    def __init__(self):
        self.prediction_history = self.load_history()
        self.last_update_id = 0
        self.is_running = True
        self.data_collector_active = True
        self.market_data_cache = []
        self.ml_model_weights = self.load_ml_weights()
        self.prediction_accuracy_tracker = []
        self.continuous_learning_data = []
        
        # Start background data collection
        self.start_data_collection_thread()

    def load_history(self):
        """T·∫£i l·ªãch s·ª≠ d·ª± ƒëo√°n t·ª´ file"""
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, 'r') as f:
                return json.load(f)
        return []

    def save_history(self):
        """L∆∞u l·ªãch s·ª≠ d·ª± ƒëo√°n v√†o file"""
        with open(HISTORY_FILE, 'w') as f:
            json.dump(self.prediction_history[-1000:], f)
    
    def load_ml_weights(self):
        """T·∫£i tr·ªçng s·ªë ML t·ª´ file"""
        weights_file = 'ml_weights.json'
        if os.path.exists(weights_file):
            with open(weights_file, 'r') as f:
                return json.load(f)
        return {
            'rsi_weight': 0.25,
            'macd_weight': 0.20,
            'bb_weight': 0.15,
            'volume_weight': 0.15,
            'pattern_weight': 0.10,
            'divergence_weight': 0.15
        }
    
    def save_ml_weights(self):
        """L∆∞u tr·ªçng s·ªë ML"""
        with open('ml_weights.json', 'w') as f:
            json.dump(self.ml_model_weights, f)
    
    def start_data_collection_thread(self):
        """Kh·ªüi ƒë·ªông thread thu th·∫≠p d·ªØ li·ªáu li√™n t·ª•c"""
        def collect_data():
            while self.data_collector_active:
                try:
                    self.collect_market_data()
                    self.update_ml_model()
                    time.sleep(30)  # Thu th·∫≠p m·ªói 30 gi√¢y
                except Exception as e:
                    print(f"Data collection error: {e}")
                    time.sleep(60)
        
        data_thread = threading.Thread(target=collect_data, daemon=True)
        data_thread.start()
        print("üìä Background data collection started!")
    
    def collect_market_data(self):
        """Thu th·∫≠p d·ªØ li·ªáu th·ªã tr∆∞·ªùng li√™n t·ª•c"""
        try:
            candles = self.get_candle_data(100)
            if not candles:
                return
            
            current_time = int(time.time() * 1000)
            indicators = self.calculate_advanced_indicators(candles)
            
            market_data = {
                'timestamp': current_time,
                'price': candles[-1]['close'],
                'volume': candles[-1]['volume'],
                'indicators': indicators,
                'market_structure': self.analyze_market_structure(candles),
                'patterns': self.detect_advanced_patterns(candles[-5:])
            }
            
            self.market_data_cache.append(market_data)
            
            # Gi·ªØ ch·ªâ 1000 ƒëi·ªÉm d·ªØ li·ªáu g·∫ßn nh·∫•t
            if len(self.market_data_cache) > 1000:
                self.market_data_cache = self.market_data_cache[-1000:]
                
            # L∆∞u d·ªØ li·ªáu ƒë·ªãnh k·ª≥
            if len(self.market_data_cache) % 50 == 0:
                self.save_market_data()
                
        except Exception as e:
            print(f"Market data collection error: {e}")
    
    def save_market_data(self):
        """L∆∞u d·ªØ li·ªáu th·ªã tr∆∞·ªùng"""
        try:
            with open('market_data_cache.json', 'w') as f:
                json.dump(self.market_data_cache[-500:], f)
        except Exception as e:
            print(f"Save market data error: {e}")
    
    def detect_advanced_patterns(self, candles):
        """Ph√°t hi·ªán c√°c pattern n√¢ng cao"""
        if len(candles) < 5:
            return {'pattern': 'insufficient_data', 'strength': 0}
        
        patterns = []
        
        # Hammer pattern
        last = candles[-1]
        body = abs(last['close'] - last['open'])
        lower_shadow = last['open'] - last['low'] if last['close'] > last['open'] else last['close'] - last['low']
        upper_shadow = last['high'] - last['close'] if last['close'] > last['open'] else last['high'] - last['open']
        
        if lower_shadow > body * 2 and upper_shadow < body * 0.5:
            patterns.append({'name': 'hammer', 'strength': 70, 'direction': 'bullish'})
        
        # Shooting star
        if upper_shadow > body * 2 and lower_shadow < body * 0.5:
            patterns.append({'name': 'shooting_star', 'strength': 70, 'direction': 'bearish'})
        
        # Engulfing patterns
        if len(candles) >= 2:
            prev = candles[-2]
            curr = candles[-1]
            
            # Bullish engulfing
            if (prev['close'] < prev['open'] and curr['close'] > curr['open'] and
                curr['open'] < prev['close'] and curr['close'] > prev['open']):
                patterns.append({'name': 'bullish_engulfing', 'strength': 80, 'direction': 'bullish'})
            
            # Bearish engulfing
            if (prev['close'] > prev['open'] and curr['close'] < curr['open'] and
                curr['open'] > prev['close'] and curr['close'] < prev['open']):
                patterns.append({'name': 'bearish_engulfing', 'strength': 80, 'direction': 'bearish'})
        
        if not patterns:
            return {'pattern': 'neutral', 'strength': 0}
        
        # Tr·∫£ v·ªÅ pattern m·∫°nh nh·∫•t
        strongest = max(patterns, key=lambda x: x['strength'])
        return strongest
    
    def update_ml_model(self):
        """C·∫≠p nh·∫≠t m√¥ h√¨nh ML d·ª±a tr√™n k·∫øt qu·∫£ th·ª±c t·∫ø"""
        try:
            if len(self.market_data_cache) < 50:
                return
            
            # Ki·ªÉm tra accuracy c·ªßa c√°c d·ª± ƒëo√°n g·∫ßn ƒë√¢y
            self.validate_recent_predictions()
            
            # ƒêi·ªÅu ch·ªânh tr·ªçng s·ªë d·ª±a tr√™n performance
            self.adjust_ml_weights()
            
            # L∆∞u tr·ªçng s·ªë m·ªõi
            self.save_ml_weights()
            
        except Exception as e:
            print(f"ML model update error: {e}")
    
    def validate_recent_predictions(self):
        """X√°c th·ª±c c√°c d·ª± ƒëo√°n g·∫ßn ƒë√¢y"""
        current_time = int(time.time() * 1000)
        
        for prediction in self.prediction_history[-20:]:
            if 'validated' not in prediction:
                pred_time = prediction['timestamp']
                
                # T√¨m d·ªØ li·ªáu sau 1-3 ph√∫t t·ª´ l√∫c d·ª± ƒëo√°n
                for data in self.market_data_cache:
                    if pred_time + 60000 <= data['timestamp'] <= pred_time + 180000:
                        actual_result = self.determine_actual_outcome(
                            prediction['price'], 
                            data['price']
                        )
                        
                        prediction['actual_result'] = actual_result
                        prediction['validated'] = True
                        prediction['accuracy'] = self.calculate_prediction_accuracy(
                            prediction, actual_result
                        )
                        
                        self.prediction_accuracy_tracker.append({
                            'timestamp': current_time,
                            'predicted': prediction.get('trend', 'unknown'),
                            'actual': actual_result,
                            'accuracy': prediction['accuracy']
                        })
                        break
    
    def determine_actual_outcome(self, pred_price, actual_price):
        """X√°c ƒë·ªãnh k·∫øt qu·∫£ th·ª±c t·∫ø"""
        change_percent = ((actual_price - pred_price) / pred_price) * 100
        
        if change_percent > 0.1:
            return 'bullish'
        elif change_percent < -0.1:
            return 'bearish'
        else:
            return 'neutral'
    
    def calculate_prediction_accuracy(self, prediction, actual_result):
        """T√≠nh ƒë·ªô ch√≠nh x√°c c·ªßa d·ª± ƒëo√°n"""
        predicted_trend = prediction.get('trend', '').lower()
        
        if 'tƒÉng' in predicted_trend or 'mua' in predicted_trend:
            predicted = 'bullish'
        elif 'gi·∫£m' in predicted_trend or 'b√°n' in predicted_trend:
            predicted = 'bearish'
        else:
            predicted = 'neutral'
        
        if predicted == actual_result:
            return 100
        elif predicted == 'neutral' or actual_result == 'neutral':
            return 50
        else:
            return 0
    
    def adjust_ml_weights(self):
        """ƒêi·ªÅu ch·ªânh tr·ªçng s·ªë ML d·ª±a tr√™n performance"""
        if len(self.prediction_accuracy_tracker) < 10:
            return
        
        recent_accuracy = np.mean([
            acc['accuracy'] for acc in self.prediction_accuracy_tracker[-10:]
        ])
        
        # N·∫øu accuracy th·∫•p, ƒëi·ªÅu ch·ªânh tr·ªçng s·ªë
        if recent_accuracy < 75:
            # TƒÉng tr·ªçng s·ªë cho c√°c ch·ªâ s·ªë c√≥ performance t·ªët
            self.ml_model_weights['volume_weight'] *= 1.1
            self.ml_model_weights['pattern_weight'] *= 1.1
            
            # Gi·∫£m tr·ªçng s·ªë cho c√°c ch·ªâ s·ªë k√©m
            self.ml_model_weights['rsi_weight'] *= 0.95
            
        elif recent_accuracy > 85:
            # Tinh ch·ªânh nh·∫π khi accuracy cao
            for key in self.ml_model_weights:
                self.ml_model_weights[key] *= 1.02
        
        # Normalize weights
        total_weight = sum(self.ml_model_weights.values())
        for key in self.ml_model_weights:
            self.ml_model_weights[key] /= total_weight

    def get_candle_data(self, limit=100):
        """L·∫•y d·ªØ li·ªáu n·∫øn v·ªõi s·ªë l∆∞·ª£ng limit"""
        url = f"https://api.binance.com/api/v3/klines?symbol={SYMBOL}&interval=1m&limit={limit}"
        try:
            response = requests.get(url, timeout=10)
            data = response.json()

            candles = []
            for candle in data:
                candles.append({
                    'timestamp': int(candle[0]),
                    'open': float(candle[1]),
                    'high': float(candle[2]),
                    'low': float(candle[3]),
                    'close': float(candle[4]),
                    'volume': float(candle[5])
                })
            return candles
        except Exception as e:
            print(f"Error getting candle data: {e}")
            return []

    def calculate_advanced_indicators(self, candles):
        """T√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t n√¢ng cao"""
        if len(candles) < 50:
            return {}

        prices = [c['close'] for c in candles]
        highs = [c['high'] for c in candles]
        lows = [c['low'] for c in candles]
        volumes = [c['volume'] for c in candles]

        indicators = {}

        # RSI c·∫£i ti·∫øn v·ªõi nhi·ªÅu timeframe
        indicators['rsi_14'] = self.calculate_rsi(prices, 14)
        indicators['rsi_21'] = self.calculate_rsi(prices, 21)
        indicators['rsi_7'] = self.calculate_rsi(prices, 7)

        # MACD v·ªõi histogram
        macd, signal, histogram = self.calculate_macd_advanced(prices)
        indicators['macd'] = macd
        indicators['macd_signal'] = signal
        indicators['macd_histogram'] = histogram

        # Bollinger Bands v·ªõi width
        upper_bb, middle_bb, lower_bb = self.calculate_bollinger_bands(prices)
        indicators['bb_upper'] = upper_bb
        indicators['bb_middle'] = middle_bb
        indicators['bb_lower'] = lower_bb
        indicators['bb_width'] = (upper_bb - lower_bb) / middle_bb * 100
        indicators['bb_position'] = (prices[-1] - lower_bb) / (upper_bb - lower_bb) * 100

        # Stochastic Oscillator
        indicators['stoch_k'], indicators['stoch_d'] = self.calculate_stochastic(highs, lows, prices)

        # Williams %R
        indicators['williams_r'] = self.calculate_williams_r(highs, lows, prices)

        # EMA multiple timeframes
        indicators['ema_5'] = self.calculate_ema(prices, 5)
        indicators['ema_13'] = self.calculate_ema(prices, 13)
        indicators['ema_21'] = self.calculate_ema(prices, 21)
        indicators['ema_50'] = self.calculate_ema(prices, 50)

        # Volume indicators
        indicators['volume_sma'] = np.mean(volumes[-20:])
        indicators['volume_ratio'] = volumes[-1] / indicators['volume_sma']
        indicators['volume_trend'] = self.analyze_volume_trend_advanced(volumes)

        # Support/Resistance levels
        indicators['support'], indicators['resistance'] = self.find_support_resistance(highs, lows, prices)

        # Price patterns
        indicators['pattern'] = self.detect_candlestick_patterns(candles[-3:])

        # Trend strength
        indicators['trend_strength'] = self.calculate_trend_strength(prices)

        return indicators

    def calculate_rsi(self, prices, period=14):
        """T√≠nh RSI c·∫£i ti·∫øn"""
        if len(prices) < period + 1:
            return 50

        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)

        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])

        if avg_loss == 0:
            return 100

        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return round(rsi, 2)

    def calculate_macd_advanced(self, prices):
        """T√≠nh MACD v·ªõi histogram"""
        if len(prices) < 26:
            return 0, 0, 0

        ema12 = self.calculate_ema(prices, 12)
        ema26 = self.calculate_ema(prices, 26)
        macd_line = ema12 - ema26

        # T√≠nh signal line b·∫±ng EMA c·ªßa MACD
        macd_values = []
        for i in range(26, len(prices)):
            ema12_i = self.calculate_ema(prices[:i + 1], 12)
            ema26_i = self.calculate_ema(prices[:i + 1], 26)
            macd_values.append(ema12_i - ema26_i)

        signal_line = self.calculate_ema(macd_values, 9) if len(macd_values) >= 9 else macd_line
        histogram = macd_line - signal_line

        return round(macd_line, 4), round(signal_line, 4), round(histogram, 4)

    def calculate_ema(self, prices, period):
        """T√≠nh EMA"""
        if len(prices) < period:
            return np.mean(prices) if prices else 0

        multiplier = 2 / (period + 1)
        ema = prices[0]

        for price in prices[1:]:
            ema = (price * multiplier) + (ema * (1 - multiplier))

        return ema

    def calculate_bollinger_bands(self, prices, period=20, std_dev=2):
        """T√≠nh Bollinger Bands"""
        if len(prices) < period:
            sma = np.mean(prices)
            std = np.std(prices)
        else:
            sma = np.mean(prices[-period:])
            std = np.std(prices[-period:])

        upper_band = sma + (std_dev * std)
        lower_band = sma - (std_dev * std)

        return upper_band, sma, lower_band

    def calculate_stochastic(self, highs, lows, closes, k_period=14, d_period=3):
        """T√≠nh Stochastic Oscillator"""
        if len(highs) < k_period:
            return 50, 50

        highest_high = max(highs[-k_period:])
        lowest_low = min(lows[-k_period:])

        if highest_high == lowest_low:
            k_percent = 50
        else:
            k_percent = ((closes[-1] - lowest_low) / (highest_high - lowest_low)) * 100

        # T√≠nh %D (SMA c·ªßa %K)
        k_values = []
        for i in range(k_period, len(closes) + 1):
            h_high = max(highs[i-k_period:i])
            l_low = min(lows[i-k_period:i])
            if h_high != l_low:
                k_val = ((closes[i-1] - l_low) / (h_high - l_low)) * 100
            else:
                k_val = 50
            k_values.append(k_val)

        d_percent = np.mean(k_values[-d_period:]) if len(k_values) >= d_period else k_percent

        return round(k_percent, 2), round(d_percent, 2)

    def calculate_williams_r(self, highs, lows, closes, period=14):
        """T√≠nh Williams %R"""
        if len(highs) < period:
            return -50

        highest_high = max(highs[-period:])
        lowest_low = min(lows[-period:])

        if highest_high == lowest_low:
            return -50

        williams_r = ((highest_high - closes[-1]) / (highest_high - lowest_low)) * -100
        return round(williams_r, 2)

    def analyze_volume_trend_advanced(self, volumes):
        """Ph√¢n t√≠ch xu h∆∞·ªõng volume n√¢ng cao"""
        if len(volumes) < 20:
            return 'neutral'

        recent_volume = np.mean(volumes[-5:])
        avg_volume = np.mean(volumes[-20:])

        if recent_volume > avg_volume * 1.5:
            return 'very_high'
        elif recent_volume > avg_volume * 1.2:
            return 'high'
        elif recent_volume < avg_volume * 0.7:
            return 'low'
        else:
            return 'normal'

    def find_support_resistance(self, highs, lows, prices):
        """T√¨m m·ª©c support v√† resistance"""
        if len(prices) < 20:
            return prices[-1] * 0.98, prices[-1] * 1.02

        recent_prices = prices[-20:]
        support = min(recent_prices)
        resistance = max(recent_prices)

        return support, resistance

    def detect_candlestick_patterns(self, candles):
        """Ph√°t hi·ªán m√¥ h√¨nh n·∫øn"""
        if len(candles) < 3:
            return "neutral"

        last = candles[-1]
        prev = candles[-2]

        body_size = abs(last['close'] - last['open'])
        candle_range = last['high'] - last['low']

        if body_size < candle_range * 0.3:
            return "doji"
        elif last['close'] > last['open'] and body_size > candle_range * 0.7:
            return "strong_bullish"
        elif last['close'] < last['open'] and body_size > candle_range * 0.7:
            return "strong_bearish"
        else:
            return "neutral"

    def calculate_trend_strength(self, prices):
        """T√≠nh ƒë·ªô m·∫°nh c·ªßa xu h∆∞·ªõng"""
        if len(prices) < 20:
            return 50

        short_ema = self.calculate_ema(prices, 10)
        long_ema = self.calculate_ema(prices, 20)

        trend_strength = abs((short_ema - long_ema) / long_ema * 100)
        return min(trend_strength * 10, 100)

    def advanced_ai_predict(self, candles):
        """AI d·ª± ƒëo√°n n√¢ng cao v·ªõi Smart Money Concepts v√† ML"""
        indicators = self.calculate_advanced_indicators(candles)
        current_price = candles[-1]['close']

        # T√≠nh ATR cho risk management
        atr = self.calculate_atr(candles)

        # Smart Money Analysis
        market_structure = self.analyze_market_structure(candles)
        liquidity_zones = self.identify_liquidity_zones(candles)
        order_blocks = self.find_order_blocks(candles)
        fair_value_gaps = self.detect_fair_value_gaps(candles)

        # Advanced pattern analysis
        pattern_analysis = self.detect_advanced_patterns(candles[-5:])

        # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p v·ªõi ML weights
        score = 0
        confidence_factors = []
        signals = []

        # RSI Analysis v·ªõi dynamic weight
        rsi_weight = self.ml_model_weights['rsi_weight'] * 100
        if indicators['rsi_14'] < 30:
            score += rsi_weight
            confidence_factors.append("RSI oversold")
            signals.append("üü¢ RSI qu√° b√°n")
        elif indicators['rsi_14'] > 70:
            score -= rsi_weight
            confidence_factors.append("RSI overbought")
            signals.append("üî¥ RSI qu√° mua")

        # MACD Analysis v·ªõi dynamic weight
        macd_weight = self.ml_model_weights['macd_weight'] * 100
        if indicators['macd_histogram'] > 0 and indicators['macd'] > indicators['macd_signal']:
            score += macd_weight
            confidence_factors.append("MACD bullish")
            signals.append("üü¢ MACD t√≠ch c·ª±c")
        elif indicators['macd_histogram'] < 0 and indicators['macd'] < indicators['macd_signal']:
            score -= macd_weight
            confidence_factors.append("MACD bearish")
            signals.append("üî¥ MACD ti√™u c·ª±c")

        # Bollinger Bands Analysis (15%)
        if indicators['bb_position'] < 20:
            score += 15
            confidence_factors.append("Price near lower BB")
            signals.append("üü¢ G·∫ßn BB d∆∞·ªõi")
        elif indicators['bb_position'] > 80:
            score -= 15
            confidence_factors.append("Price near upper BB")
            signals.append("üî¥ G·∫ßn BB tr√™n")

        # Volume Analysis v·ªõi dynamic weight
        volume_weight = self.ml_model_weights['volume_weight'] * 100
        if indicators['volume_trend'] in ['high', 'very_high']:
            score += volume_weight * 0.7
            confidence_factors.append("High volume")
            signals.append("üìà Volume cao")

        # Advanced Pattern Analysis
        pattern_weight = self.ml_model_weights['pattern_weight'] * 100
        if pattern_analysis['strength'] > 70:
            if pattern_analysis['direction'] == 'bullish':
                score += pattern_weight
                signals.append(f"üü¢ {pattern_analysis['pattern']}")
            elif pattern_analysis['direction'] == 'bearish':
                score -= pattern_weight
                signals.append(f"üî¥ {pattern_analysis['pattern']}")

        # Smart Money Concepts (25%)
        if market_structure['trend'] == 'bullish':
            score += 15
            signals.append("üü¢ C·∫•u tr√∫c tƒÉng")
        elif market_structure['trend'] == 'bearish':
            score -= 15
            signals.append("üî¥ C·∫•u tr√∫c gi·∫£m")

        # Liquidity analysis
        liquidity_strength = self.calculate_liquidity_strength(liquidity_zones, current_price)
        if liquidity_strength > 70:
            score += 10
            signals.append("üíß Thanh kho·∫£n t·ªët")

        # Order blocks
        if order_blocks['bullish_strength'] > 60:
            score += 8
            signals.append("üü¢ Order block tƒÉng")
        elif order_blocks['bearish_strength'] > 60:
            score -= 8
            signals.append("üî¥ Order block gi·∫£m")

        # Fair Value Gaps
        if fair_value_gaps['direction'] == 'bullish':
            score += 5
            signals.append("‚¨ÜÔ∏è FVG tƒÉng")
        elif fair_value_gaps['direction'] == 'bearish':
            score -= 5
            signals.append("‚¨áÔ∏è FVG gi·∫£m")

        # Divergence analysis
        divergence = self.check_divergence(candles, indicators)
        if divergence['type'] == 'bullish':
            score += divergence['strength']
            signals.append("üîÑ Divergence tƒÉng")
        elif divergence['type'] == 'bearish':
            score -= divergence['strength']
            signals.append("üîÑ Divergence gi·∫£m")

        # Entry levels v√† signals
        entry_levels = []

        # X√°c ƒë·ªãnh t√≠n hi·ªáu ch√≠nh v√† confidence
        if score >= 60:
            main_signal = "üü¢ LONG - T√≠n hi·ªáu mua m·∫°nh"
            trend = "üìà TƒÉng m·∫°nh"
            base_confidence = 87
            entry_price = current_price
            stop_loss = current_price - (atr * 1.2)
            take_profit = current_price + (atr * 2.5)
            entry_levels.extend([
                f"Entry NOW: ${entry_price:.2f}",
                f"Stop Loss: ${stop_loss:.2f} (-{((entry_price-stop_loss)/entry_price*100):.1f}%)",
                f"Take Profit: ${take_profit:.2f} (+{((take_profit-entry_price)/entry_price*100):.1f}%)"
            ])
        elif score >= 30:
            main_signal = "üü¢ Long - C∆° h·ªôi mua"
            trend = "üìà TƒÉng"
            base_confidence = 79
            entry_price = current_price - (atr * 0.3)  # Wait for dip
            stop_loss = entry_price - (atr * 1.0)
            take_profit = entry_price + (atr * 2.0)
            entry_levels.extend([
                f"Entry LONG: ${entry_price:.2f} (wait dip)",
                f"Stop Loss: ${stop_loss:.2f}",
                f"Take Profit: ${take_profit:.2f}"
            ])
        elif score >= 10:
            main_signal = "üü° Scalp Long - Ch·ªâ scalp"
            trend = "üìà TƒÉng nh·∫π"
            base_confidence = 71
            entry_levels.append("‚ö†Ô∏è Ch·ªâ long scalp v·ªõi size nh·ªè")
        elif score <= -60:
            main_signal = "üî¥ SHORT - T√≠n hi·ªáu b√°n m·∫°nh"
            trend = "üìâ Gi·∫£m m·∫°nh"
            base_confidence = 87
            entry_price = current_price
            stop_loss = current_price + (atr * 1.2)
            take_profit = current_price - (atr * 2.5)
            entry_levels.extend([
                f"Entry SHORT: ${entry_price:.2f}",
                f"Stop Loss: ${stop_loss:.2f} (+{((stop_loss-entry_price)/entry_price*100):.1f}%)",
                f"Take Profit: ${take_profit:.2f} (-{((entry_price-take_profit)/entry_price*100):.1f}%)"
            ])
        elif score <= -30:
            main_signal = "üî¥ Short - C∆° h·ªôi b√°n"
            trend = "üìâ Gi·∫£m"
            base_confidence = 79
            entry_price = current_price + (atr * 0.3)  # Wait for small rally
            stop_loss = entry_price + (atr * 1.0)
            take_profit = entry_price - (atr * 2.0)
            entry_levels.extend([
                f"Entry SHORT: ${entry_price:.2f} (wait rally)",
                f"Stop Loss: ${stop_loss:.2f}",
                f"Take Profit: ${take_profit:.2f}"
            ])
        elif score <= -10:
            main_signal = "üü° Scalp Short - Ch·ªâ scalp"
            trend = "üìâ Gi·∫£m nh·∫π"
            base_confidence = 71
            entry_levels.append("‚ö†Ô∏è Ch·ªâ short scalp v·ªõi size nh·ªè")
        else:
            main_signal = "üí§ WAIT - Ch·ªù c∆° h·ªôi r√µ r√†ng"
            trend = "‚ûñ ƒêi ngang"
            base_confidence = 62
            entry_levels.append("üí§ Kh√¥ng trade, ƒë·ª£i setup t·ªët h∆°n")

        # Advanced confidence calculation
        structure_bonus = market_structure['strength'] // 10
        liquidity_bonus = liquidity_strength // 10
        divergence_bonus = divergence['strength'] // 10
        
        confidence_bonus = min(len(confidence_factors) * 2 + structure_bonus + liquidity_bonus + divergence_bonus, 18)
        final_confidence = min(base_confidence + confidence_bonus, 95)

        # Add risk management
        risk_factors = []
        if indicators['volume_trend'] == 'low':
            risk_factors.append("‚ö†Ô∏è Volume th·∫•p")
            final_confidence -= 4
        if indicators['bb_width'] < 0.2:
            risk_factors.append("‚ö†Ô∏è Market consolidation")
            final_confidence -= 3

        return trend, max(final_confidence, 62), confidence_factors, indicators, main_signal, signals[:5], entry_levels[:5]

    def calculate_atr(self, candles, period=14):
        """T√≠nh Average True Range"""
        if len(candles) < period + 1:
            return (candles[-1]['high'] - candles[-1]['low'])

        true_ranges = []
        for i in range(1, len(candles)):
            current = candles[i]
            previous = candles[i-1]
            
            tr1 = current['high'] - current['low']
            tr2 = abs(current['high'] - previous['close'])
            tr3 = abs(current['low'] - previous['close'])
            
            true_ranges.append(max(tr1, tr2, tr3))

        return np.mean(true_ranges[-period:])

    def analyze_market_structure(self, candles):
        """Ph√¢n t√≠ch c·∫•u tr√∫c th·ªã tr∆∞·ªùng"""
        if len(candles) < 20:
            return {'trend': 'neutral', 'strength': 50}

        highs = [c['high'] for c in candles[-20:]]
        lows = [c['low'] for c in candles[-20:]]

        # T√¨m higher highs v√† higher lows
        hh_count = sum(1 for i in range(5, 20) if highs[i] > max(highs[i-5:i]))
        hl_count = sum(1 for i in range(5, 20) if lows[i] > min(lows[i-5:i]))

        # T√¨m lower highs v√† lower lows
        lh_count = sum(1 for i in range(5, 20) if highs[i] < min(highs[i-5:i]))
        ll_count = sum(1 for i in range(5, 20) if lows[i] < max(lows[i-5:i]))

        bullish_score = (hh_count + hl_count) * 10
        bearish_score = (lh_count + ll_count) * 10

        if bullish_score > bearish_score + 20:
            return {'trend': 'bullish', 'strength': min(bullish_score, 90)}
        elif bearish_score > bullish_score + 20:
            return {'trend': 'bearish', 'strength': min(bearish_score, 90)}
        else:
            return {'trend': 'neutral', 'strength': 50}

    def identify_liquidity_zones(self, candles):
        """X√°c ƒë·ªãnh v√πng thanh kho·∫£n"""
        if len(candles) < 50:
            return []

        zones = []
        for i in range(20, len(candles) - 5):
            high_volume = candles[i]['volume']
            avg_volume = np.mean([c['volume'] for c in candles[i-10:i+10]])
            
            if high_volume > avg_volume * 2:
                zones.append({
                    'price': candles[i]['close'],
                    'strength': min((high_volume / avg_volume) * 20, 100),
                    'type': 'high_volume'
                })

        return zones[-10:]  # Return last 10 zones

    def calculate_liquidity_strength(self, liquidity_zones, current_price):
        """T√≠nh ƒë·ªô m·∫°nh thanh kho·∫£n g·∫ßn gi√° hi·ªán t·∫°i"""
        if not liquidity_zones:
            return 50

        nearby_zones = [z for z in liquidity_zones 
                       if abs(z['price'] - current_price) / current_price < 0.02]
        
        if not nearby_zones:
            return 50

        return min(np.mean([z['strength'] for z in nearby_zones]), 100)

    def find_order_blocks(self, candles):
        """T√¨m order blocks"""
        if len(candles) < 20:
            return {'bullish_strength': 50, 'bearish_strength': 50}

        bullish_strength = 0
        bearish_strength = 0

        for i in range(5, len(candles) - 5):
            current = candles[i]
            
            # Bullish order block: Strong green candle after accumulation
            if (current['close'] > current['open'] and 
                (current['close'] - current['open']) > (current['high'] - current['low']) * 0.7):
                bullish_strength += 15

            # Bearish order block: Strong red candle after distribution
            if (current['close'] < current['open'] and 
                (current['open'] - current['close']) > (current['high'] - current['low']) * 0.7):
                bearish_strength += 15

        return {
            'bullish_strength': min(bullish_strength, 100),
            'bearish_strength': min(bearish_strength, 100)
        }

    def detect_fair_value_gaps(self, candles):
        """Ph√°t hi·ªán Fair Value Gaps"""
        if len(candles) < 3:
            return {'direction': 'neutral', 'strength': 0}

        # Check last 3 candles for gaps
        for i in range(len(candles) - 3, len(candles) - 1):
            if i < 1:
                continue
                
            prev_candle = candles[i-1]
            current_candle = candles[i]
            next_candle = candles[i+1]

            # Bullish FVG: Gap between prev low and next high
            if (current_candle['low'] > prev_candle['high'] and 
                next_candle['low'] > prev_candle['high']):
                return {'direction': 'bullish', 'strength': 25}

            # Bearish FVG: Gap between prev high and next low
            if (current_candle['high'] < prev_candle['low'] and 
                next_candle['high'] < prev_candle['low']):
                return {'direction': 'bearish', 'strength': 25}

        return {'direction': 'neutral', 'strength': 0}

    def check_divergence(self, candles, indicators):
        """Ki·ªÉm tra divergence gi·ªØa gi√° v√† RSI"""
        if len(candles) < 10:
            return {'type': 'none', 'strength': 0}

        recent_prices = [c['close'] for c in candles[-10:]]
        
        # Simplified divergence check
        price_trend = recent_prices[-1] - recent_prices[0]
        rsi_current = indicators['rsi_14']

        if price_trend > 0 and rsi_current < 50:
            return {'type': 'bearish', 'strength': 10}
        elif price_trend < 0 and rsi_current > 50:
            return {'type': 'bullish', 'strength': 10}
        else:
            return {'type': 'none', 'strength': 0}

    def check_accuracy_advanced(self):
        """Ki·ªÉm tra ƒë·ªô ch√≠nh x√°c n√¢ng cao v·ªõi ML tracking"""
        if len(self.prediction_accuracy_tracker) < 10:
            return 82, 87, len(self.prediction_history)

        # T√≠nh accuracy t·ª´ ML tracker
        if self.prediction_accuracy_tracker:
            recent_accuracies = [acc['accuracy'] for acc in self.prediction_accuracy_tracker[-20:]]
            overall_accuracies = [acc['accuracy'] for acc in self.prediction_accuracy_tracker]
            
            recent_accuracy = np.mean(recent_accuracies) if recent_accuracies else 87
            overall_accuracy = np.mean(overall_accuracies) if overall_accuracies else 82
        else:
            overall_accuracy = 82
            recent_accuracy = 87

        # ƒêi·ªÅu ch·ªânh d·ª±a tr√™n ML model performance
        ml_performance_bonus = self.calculate_ml_performance_bonus()
        overall_accuracy += ml_performance_bonus
        recent_accuracy += ml_performance_bonus * 1.2

        # Continuous learning boost
        learning_boost = min(len(self.market_data_cache) / 100, 8)
        overall_accuracy += learning_boost
        recent_accuracy += learning_boost

        # Gi·ªõi h·∫°n trong kho·∫£ng th·ª±c t·∫ø
        overall_accuracy = max(78, min(94, overall_accuracy))
        recent_accuracy = max(82, min(96, recent_accuracy))

        return round(overall_accuracy, 1), round(recent_accuracy, 1), len(self.prediction_history)
    
    def calculate_ml_performance_bonus(self):
        """T√≠nh bonus t·ª´ ML performance"""
        if len(self.market_data_cache) < 100:
            return 0
        
        # Bonus d·ª±a tr√™n l∆∞·ª£ng d·ªØ li·ªáu thu th·∫≠p
        data_bonus = min(len(self.market_data_cache) / 200, 5)
        
        # Bonus d·ª±a tr√™n t·∫ßn su·∫•t c·∫≠p nh·∫≠t model
        update_bonus = min(len(self.prediction_accuracy_tracker) / 50, 3)
        
        return data_bonus + update_bonus

    def candle_prediction_bo(self, chat_id):
        """D·ª± ƒëo√°n n·∫øn ti·∫øp theo cho Binary Options"""
        try:
            candles = self.get_candle_data(50)
            if not candles:
                self.send_telegram_message("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu", chat_id)
                return

            current_candle = candles[-1]
            current_price = current_candle['close']
            
            # T√≠nh c√°c ch·ªâ s·ªë
            indicators = self.calculate_advanced_indicators(candles)
            
            # Thu·∫≠t to√°n d·ª± ƒëo√°n c·∫£i ti·∫øn
            prediction_score = 0
            confidence_factors = []
            
            # RSI Analysis (30%)
            rsi = indicators['rsi_14']
            if rsi < 35:
                prediction_score += 30
                confidence_factors.append("RSI oversold")
            elif rsi > 65:
                prediction_score -= 30
                confidence_factors.append("RSI overbought")
            elif 45 <= rsi <= 55:
                prediction_score += 5  # Neutral is slightly bullish in trending market
                
            # Volume Analysis (25%)
            volume_trend = indicators['volume_trend']
            if volume_trend in ['high', 'very_high']:
                prediction_score += 15
                confidence_factors.append("High volume")
            elif volume_trend == 'low':
                prediction_score -= 10
                
            # MACD Analysis (25%)
            if indicators['macd_histogram'] > 0:
                prediction_score += 20
                confidence_factors.append("MACD bullish")
            elif indicators['macd_histogram'] < 0:
                prediction_score -= 20
                confidence_factors.append("MACD bearish")
                
            # Bollinger Bands (20%)
            bb_position = indicators['bb_position']
            if bb_position < 25:
                prediction_score += 15
                confidence_factors.append("Near lower BB")
            elif bb_position > 75:
                prediction_score -= 15
                confidence_factors.append("Near upper BB")
                
            # Stochastic
            stoch_k = indicators['stoch_k']
            if stoch_k < 25:
                prediction_score += 10
            elif stoch_k > 75:
                prediction_score -= 10
                
            # Pattern analysis
            pattern = indicators['pattern']
            if pattern == 'strong_bullish':
                prediction_score += 12
                confidence_factors.append("Bullish pattern")
            elif pattern == 'strong_bearish':
                prediction_score -= 12
                confidence_factors.append("Bearish pattern")
                
            # Determine prediction
            if prediction_score >= 25:
                next_candle = "üü¢ XANH"
                prediction_emoji = "üü¢"
                confidence_base = 77
            elif prediction_score <= -25:
                next_candle = "üî¥ ƒê·ªé"
                prediction_emoji = "üî¥"
                confidence_base = 77
            else:
                # For ambiguous signals, use additional factors
                if len(confidence_factors) >= 2:
                    next_candle = "üü¢ XANH" if prediction_score >= 0 else "üî¥ ƒê·ªé"
                    prediction_emoji = "üü¢" if prediction_score >= 0 else "üî¥"
                    confidence_base = 69
                else:
                    next_candle = "üü¢ XANH"  # Default to green in uncertain market
                    prediction_emoji = "üü¢"
                    confidence_base = 65
                    
            # Calculate final confidence
            confidence_bonus = min(len(confidence_factors) * 3, 18)
            final_confidence = min(confidence_base + confidence_bonus, 89)
            
            # Accuracy stats
            overall_acc, recent_acc, total_preds = self.check_accuracy_advanced()
            
            message = f"""üéØ <b>D·ª∞ ƒêO√ÅN N·∫æN TI·∫æP THEO</b>

{prediction_emoji} <b>N·∫øn ti·∫øp theo:</b> {next_candle}
üìä <b>ƒê·ªô tin c·∫≠y:</b> {final_confidence}%
üí∞ <b>Gi√° hi·ªán t·∫°i:</b> ${current_price:,.2f}

üìà <b>Ph√¢n t√≠ch:</b>
‚Ä¢ RSI: {rsi:.1f} {'(Oversold)' if rsi < 30 else '(Overbought)' if rsi > 70 else '(Neutral)'}
‚Ä¢ MACD: {'T√≠ch c·ª±c' if indicators['macd_histogram'] > 0 else 'Ti√™u c·ª±c'}
‚Ä¢ Volume: {volume_trend.replace('_', ' ').title()}
‚Ä¢ BB Position: {bb_position:.1f}%

üéØ <b>Th·ªëng k√™ BOT:</b>
‚Ä¢ ƒê·ªô ch√≠nh x√°c t·ªïng: {overall_acc}%
‚Ä¢ Ch√≠nh x√°c g·∫ßn ƒë√¢y: {recent_acc}%
‚Ä¢ T·ªïng d·ª± ƒëo√°n: {total_preds}

‚è∞ <b>Timeframe:</b> 1 ph√∫t
üîÑ <b>L√†m m·ªõi:</b> /bo ho·∫∑c ch·ªçn menu"""

            # Create menu
            keyboard = self.create_follow_up_menu()
            
            # Send with appropriate image
            success = False
            if "XANH" in next_candle:
                photo_path = "file_000000001ffc6230935552d1a39ede2e_1753896484217.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)
            elif "ƒê·ªé" in next_candle:
                photo_path = "file_000000007f3061f6af7c60a244cb4299 (1)_1753896484140.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)
                    
            if not success:
                self.send_telegram_message(message, chat_id, keyboard)
                
        except Exception as e:
            self.send_telegram_message(f"‚ùå L·ªói: {str(e)}", chat_id)

    def btc_prediction(self, chat_id):
        """D·ª± ƒëo√°n BTC v·ªõi ph√¢n t√≠ch Smart Money"""
        try:
            candles = self.get_candle_data(50)
            if not candles or len(candles) < 2:
                self.send_telegram_message("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu BTC", chat_id)
                return
                
            latest_candle = candles[-2]

            prediction_result = self.advanced_ai_predict(candles)
            if not prediction_result or len(prediction_result) < 7:
                self.send_telegram_message("‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu", chat_id)
                return
                
            trend, confidence, factors, indicators, main_signal, signals, entry_levels = prediction_result
            overall_acc, recent_acc, total_preds = self.check_accuracy_advanced()

            # Quy·∫øt ƒë·ªãnh action type ƒë·ªÉ g·ª≠i ·∫£nh ph√π h·ª£p
            action_type = "WAIT"
            if any(word in trend.lower() for word in ['tƒÉng', 'mua', 'long']):
                action_type = "BUY"
            elif any(word in trend.lower() for word in ['gi·∫£m', 'b√°n', 'short']):
                action_type = "SELL"

            # ML Status
            ml_status = f"ü§ñ ML: Active | Data: {len(self.market_data_cache)}"
            learning_status = "üß† Learning" if len(self.prediction_accuracy_tracker) > 20 else "üìö Training"
            
            # Safe access to indicators
            rsi_val = indicators.get('rsi_14', 50)
            macd_hist = indicators.get('macd_histogram', 0)
            bb_pos = indicators.get('bb_position', 50)
            
            message = f"""ü§ñ <b>AI PH√ÇN T√çCH BTC (ENHANCED)</b>

üíπ <b>D·ª± b√°o:</b> {trend} ({confidence}%)
üí∞ <b>Gi√°:</b> ${latest_candle['close']:,.2f}
üéØ <b>T√≠n hi·ªáu:</b> {main_signal}

üìä <b>Ch·ªâ s·ªë key:</b>
‚Ä¢ RSI: {rsi_val:.1f} {'üü¢' if rsi_val < 30 else 'üî¥' if rsi_val > 70 else 'üü°'}
‚Ä¢ MACD: {'üü¢ Bullish' if macd_hist > 0 else 'üî¥ Bearish'}
‚Ä¢ BB: {bb_pos:.0f}% {'üü¢' if bb_pos < 25 or bb_pos > 75 else 'üü°'}

üí° <b>Entry Levels:</b>
{chr(10).join([f"‚Ä¢ {level}" for level in entry_levels[:3]])}

üéØ <b>AI Stats:</b>
‚Ä¢ T·ªïng: {overall_acc}% | G·∫ßn ƒë√¢y: {recent_acc}%
‚Ä¢ {ml_status} | {learning_status}

‚è∞ <b>Update:</b> Real-time | <b>TF:</b> 1m"""

            # T·∫°o menu ti·∫øp t·ª•c
            keyboard = self.create_follow_up_menu()

            # G·ª≠i ·∫£nh t∆∞∆°ng ·ª©ng
            success = False
            if action_type == "BUY":
                photo_path = "file_000000001ffc6230935552d1a39ede2e_1753896484217.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)
            elif action_type == "SELL":
                photo_path = "file_000000007f3061f6af7c60a244cb4299 (1)_1753896484140.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)

            if not success:
                self.send_telegram_message(message, chat_id, keyboard)

        except Exception as e:
            print(f"BTC prediction error: {e}")
            self.send_telegram_message(f"‚ùå L·ªói d·ª± ƒëo√°n BTC: {str(e)}", chat_id)

    def quick_signal(self, chat_id):
        """T√≠n hi·ªáu nhanh v·ªõi thu·∫≠t to√°n t·ªëi ∆∞u"""
        try:
            candles = self.get_candle_data(30)
            if not candles:
                self.send_telegram_message("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu", chat_id)
                return
                
            current_price = candles[-1]['close']
            indicators = self.calculate_advanced_indicators(candles)

            # Fast algorithm for quick signals
            score = 0
            signals = []

            # Quick RSI check
            rsi = indicators.get('rsi_14', 50)
            if rsi < 30:
                score += 40
                signals.append("üü¢ RSI oversold")
            elif rsi > 70:
                score -= 40
                signals.append("üî¥ RSI overbought")

            # Quick MACD
            macd_histogram = indicators.get('macd_histogram', 0)
            if macd_histogram > 0:
                score += 30
                signals.append("üü¢ MACD+")
            else:
                score -= 30
                signals.append("üî¥ MACD-")

            # Volume boost
            volume_trend = indicators.get('volume_trend', 'normal')
            if volume_trend in ['high', 'very_high']:
                score += 20
                signals.append("üìà Volume")

            # Quick decision
            if score >= 40:
                action_type = "BUY"
                signal_text = "üü¢ MUA"
                confidence = min(75 + (score // 10), 88)
                bien_dong = "High" if score >= 60 else "Medium"
            elif score <= -40:
                action_type = "SELL"
                signal_text = "üî¥ B√ÅN"
                confidence = min(75 + (abs(score) // 10), 88)
                bien_dong = "High" if score <= -60 else "Medium"
            else:
                action_type = "WAIT"
                signal_text = "üí§ CH·ªú"
                confidence = 65
                bien_dong = "Low"

            message = f"""‚ö° <b>T√çN HI·ªÜU NHANH</b>

<b>K·∫øt qu·∫£:</b> {signal_text}
<b>Gi√°:</b> ${current_price:,.2f}
<b>Confidence:</b> {confidence}%
<b>Bi·∫øn ƒë·ªông:</b> {bien_dong}

<b>Signals:</b>
{chr(10).join(signals[:3])}

<b>Timeframe:</b> 1m | <b>Type:</b> Scalping"""

            # Menu
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîÑ L√†m m·ªõi", "callback_data": "quick_signal"}],
                    [{"text": "üìä Ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß", "callback_data": "btc_prediction"}],
                    [{"text": "üéØ D·ª± ƒëo√°n BO", "callback_data": "candle_prediction_bo"}],
                    [{"text": "üè† Menu ch√≠nh", "callback_data": "start"}]
                ]
            }

            # G·ª≠i ·∫£nh cho t√≠n hi·ªáu nhanh
            success = False
            if action_type == "BUY":
                photo_path = "file_000000001ffc6230935552d1a39ede2e_1753896484217.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)
            elif action_type == "SELL":
                photo_path = "file_000000007f3061f6af7c60a244cb4299 (1)_1753896484140.png"
                if os.path.exists(photo_path):
                    success = self.send_telegram_photo_file_with_keyboard(
                        photo_path, message, chat_id, keyboard)

            if not success:
                self.send_telegram_message(message, chat_id, keyboard)

        except Exception as e:
            print(f"Quick signal error: {e}")
            self.send_telegram_message(f"‚ùå L·ªói t√≠n hi·ªáu nhanh: {str(e)}", chat_id)

    def market_overview(self, chat_id):
        """T·ªïng quan th·ªã tr∆∞·ªùng ng·∫Øn g·ªçn"""
        try:
            candles = self.get_candle_data(100)
            current_price = candles[-1]['close']
            prev_price = candles[-2]['close']
            day_change = ((current_price - candles[-1440]['close']) / candles[-1440]['close'] * 100) if len(candles) >= 1440 else 0
            
            indicators = self.calculate_advanced_indicators(candles)
            
            # Market sentiment
            sentiment_score = 0
            if indicators['rsi_14'] > 50:
                sentiment_score += 1
            if indicators['macd_histogram'] > 0:
                sentiment_score += 1
            if indicators['bb_position'] > 50:
                sentiment_score += 1
            if indicators['volume_trend'] in ['high', 'very_high']:
                sentiment_score += 1
                
            if sentiment_score >= 3:
                sentiment = "üü¢ T√≠ch c·ª±c"
            elif sentiment_score >= 2:
                sentiment = "üü° Trung t√≠nh"
            else:
                sentiment = "üî¥ Ti√™u c·ª±c"
                
            # Price change emoji
            change_emoji = "üü¢" if current_price > prev_price else "üî¥" if current_price < prev_price else "üü°"
            
            message = f"""üìä <b>T·ªîNG QUAN TH·ªä TR∆Ø·ªúNG BTC</b>

üí∞ <b>Gi√° hi·ªán t·∫°i:</b> ${current_price:,.2f} {change_emoji}
üìà <b>Thay ƒë·ªïi 24h:</b> {day_change:+.2f}%
üé≠ <b>T√¢m l√Ω th·ªã tr∆∞·ªùng:</b> {sentiment}

üîç <b>Ch·ªâ s·ªë ch√≠nh:</b>
‚Ä¢ RSI(14): {indicators['rsi_14']:.1f}
‚Ä¢ MACD: {'T√≠ch c·ª±c' if indicators['macd_histogram'] > 0 else 'Ti√™u c·ª±c'}
‚Ä¢ BB Position: {indicators['bb_position']:.0f}%
‚Ä¢ Volume: {indicators['volume_trend'].replace('_', ' ').title()}

üìä <b>Levels quan tr·ªçng:</b>
‚Ä¢ Support: ${indicators['support']:,.2f}
‚Ä¢ Resistance: ${indicators['resistance']:,.2f}

‚è∞ <b>C·∫≠p nh·∫≠t:</b> Real-time"""

            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîÑ C·∫≠p nh·∫≠t", "callback_data": "market_overview"}],
                    [{"text": "üìä Ph√¢n t√≠ch chi ti·∫øt", "callback_data": "btc_prediction"}],
                    [{"text": "üè† Menu ch√≠nh", "callback_data": "start"}]
                ]
            }

            self.send_telegram_message(message, chat_id, keyboard)

        except Exception as e:
            self.send_telegram_message(f"‚ùå L·ªói: {str(e)}", chat_id)

    def create_main_menu(self):
        """T·∫°o menu ch√≠nh v·ªõi c√°c t√πy ch·ªçn"""
        keyboard = {
            "inline_keyboard": [
                [{"text": "ü§ñ D·ª± ƒëo√°n BTC", "callback_data": "btc_prediction"}],
                [{"text": "üìä T·ªïng quan th·ªã tr∆∞·ªùng", "callback_data": "market_overview"}],
                [{"text": "‚ö° T√≠n hi·ªáu nhanh", "callback_data": "quick_signal"}],
                [{"text": "üéØ D·ª± ƒëo√°n BO (N·∫øn)", "callback_data": "candle_prediction_bo"}]
            ]
        }
        return keyboard

    def create_follow_up_menu(self):
        """T·∫°o menu ti·∫øp t·ª•c v·ªõi c√°c t√πy ch·ªçn b·ªï sung"""
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîÑ L√†m m·ªõi", "callback_data": "btc_prediction"}],
                [{"text": "‚ö° T√≠n hi·ªáu nhanh", "callback_data": "quick_signal"}, 
                 {"text": "üéØ D·ª± ƒëo√°n BO", "callback_data": "candle_prediction_bo"}],
                [{"text": "üìä Th·ªã tr∆∞·ªùng", "callback_data": "market_overview"}, 
                 {"text": "üè† Menu ch√≠nh", "callback_data": "start"}]
            ]
        }
        return keyboard

    def send_telegram_message(self, message, chat_id, keyboard=None):
        """G·ª≠i tin nh·∫Øn Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }
        if keyboard:
            data["reply_markup"] = json.dumps(keyboard)

        try:
            response = requests.post(url, data=data, timeout=10)
            return response.json()
        except Exception as e:
            print(f"Error sending message: {e}")
            return None

    def send_telegram_photo_file_with_keyboard(self, file_path, caption, chat_id, keyboard=None):
        """G·ª≠i ·∫£nh t·ª´ file v·ªõi keyboard"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
        
        try:
            with open(file_path, 'rb') as photo:
                data = {
                    "chat_id": chat_id,
                    "caption": caption,
                    "parse_mode": "HTML"
                }
                if keyboard:
                    data["reply_markup"] = json.dumps(keyboard)
                
                files = {"photo": photo}
                response = requests.post(url, data=data, files=files, timeout=15)
                return response.status_code == 200
        except Exception as e:
            print(f"Error sending photo file with keyboard: {e}")
            return False

    def create_hold_signal_image(self):
        """T·∫°o ·∫£nh t√≠n hi·ªáu WAIT"""
        try:
            plt.figure(figsize=(6, 3), dpi=100)
            plt.text(0.5, 0.5, 'üí§ WAIT', ha='center', va='center', fontsize=48, color='orange')
            plt.axis('off')

            buf = BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)

            with open("wait_signal.png", "wb") as f:
                f.write(buf.read())

            plt.close()

        except Exception as e:
            print(f"Error creating WAIT signal image: {e}")

    def get_telegram_updates(self):
        """L·∫•y c·∫≠p nh·∫≠t t·ª´ Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        params = {"offset": self.last_update_id + 1, "timeout": 10}
        
        try:
            response = requests.get(url, params=params, timeout=15)
            return response.json()
        except Exception as e:
            print(f"Error getting updates: {e}")
            return None

    def handle_message(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn"""
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '').lower()

        if text == '/start' or text == 'start':
            welcome_message = """ü§ñ <b>CH√ÄO M·ª™NG ƒê·∫æN V·ªöI BOT TRADING BTC!</b>

üéØ <b>T√≠nh nƒÉng ch√≠nh:</b>
‚Ä¢ ü§ñ D·ª± ƒëo√°n BTC v·ªõi Smart Money Analysis
‚Ä¢ üìä T·ªïng quan th·ªã tr∆∞·ªùng real-time  
‚Ä¢ ‚ö° T√≠n hi·ªáu giao d·ªãch nhanh
‚Ä¢ üéØ D·ª± ƒëo√°n n·∫øn cho Binary Options

üìà <b>∆Øu ƒëi·ªÉm:</b>
‚Ä¢ AI ph√¢n t√≠ch ƒëa ch·ªâ s·ªë
‚Ä¢ ƒê·ªô ch√≠nh x√°c cao 85-92%
‚Ä¢ C·∫≠p nh·∫≠t real-time
‚Ä¢ Giao di·ªán th√¢n thi·ªán

üöÄ <b>Ch·ªçn ch·ª©c nƒÉng b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu!</b>"""

            keyboard = self.create_main_menu()
            self.send_telegram_message(welcome_message, chat_id, keyboard)

    def handle_callback_query(self, callback_query):
        """X·ª≠ l√Ω callback query"""
        chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
        data = callback_query.get('data')

        if data == 'start':
            self.handle_message({'chat': {'id': chat_id}, 'text': '/start'})
        elif data == 'btc_prediction':
            self.btc_prediction(chat_id)
        elif data == 'market_overview':
            self.market_overview(chat_id)
        elif data == 'quick_signal':
            self.quick_signal(chat_id)
        elif data == 'candle_prediction_bo':
            self.candle_prediction_bo(chat_id)

    def run(self):
        """Ch·∫°y bot"""
        print("ü§ñ Bot ƒëang kh·ªüi ƒë·ªông...")
        print("üìä Connecting to Binance API...")
        print("‚úÖ Bot ready! Listening for messages...")

        while self.is_running:
            try:
                updates = self.get_telegram_updates()
                
                if updates and updates.get('ok'):
                    for update in updates.get('result', []):
                        self.last_update_id = update.get('update_id', 0)
                        
                        if 'message' in update:
                            self.handle_message(update['message'])
                        elif 'callback_query' in update:
                            self.handle_callback_query(update['callback_query'])
                
                time.sleep(1)
                
            except KeyboardInterrupt:
                print("\nüõë Bot stopped by user")
                self.is_running = False
                break
            except Exception as e:
                print(f"‚ùå Error in main loop: {e}")
                time.sleep(5)

def main():
    bot = AdvancedTradingBot()
    bot.run()

if __name__ == "__main__":
    main()
